<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\code.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\code.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu May 09 16:55:37 2024
<BR><P>
<H3>Maximum Stack Usage =        284 bytes + Unknown(Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; over_show &rArr; Ld3320_Fun &rArr; LD_AsrAddFixed &rArr; LD_Check_ASRBusyFlag_b2 &rArr; LD_ReadReg &rArr; SPI_WriteByte
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1]">LCDINI_Handler</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[6]">Reset_Handler</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[2]">SPI_Handler</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[4]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_cmsdk_cm0.o(.text)
 <LI><a href="#[5]">_sputc</a> from printf1.o(i._sputc) referenced from printf1.o(i.__0sprintf$1)
 <LI><a href="#[3]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(.text)
</UL>
<P><STRONG><a name="[68]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[7]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[d]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[69]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[6a]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[6b]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[6c]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[6d]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[6]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))

<P><STRONG><a name="[1]"></a>LCDINI_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_INI_FINISH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>SPI_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SPI_Handler &rArr; SPIHandle &rArr; ProcessInt &rArr; LD_WriteReg &rArr; SPI_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[c]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;over_show
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_improve
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collision_check
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[6f]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[b]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_enemies
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;over_show
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collision_check
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;begin_show
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_random_position
</UL>

<P><STRONG><a name="[51]"></a>rand</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_enemies
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collision_check
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_random_position
</UL>

<P><STRONG><a name="[70]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[26]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LD_AsrAddFixed
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2String
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1String
</UL>

<P><STRONG><a name="[8]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[73]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[e]"></a>ADC_value</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, mpuiic.o(i.ADC_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ADC_value &rArr; MPU_IIC_Read_Byte &rArr; MPU_IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Read_Byte
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Wait_Ack
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Stop
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Start
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_select
</UL>

<P><STRONG><a name="[47]"></a>DoSum</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, code_def.o(i.DoSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DoSum
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendCmd
</UL>

<P><STRONG><a name="[14]"></a>Gesture_test</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, pajiic.o(i.Gesture_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Gesture_test &rArr; paj_read_nbyte &rArr; PAJ_IIC_Read_Byte &rArr; PAJ_IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paj_write_byte
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paj_read_nbyte
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1String
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intelligence_mode
</UL>

<P><STRONG><a name="[18]"></a>Key_Scan</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, code_def.o(i.Key_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Key_Scan
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a]"></a>LCD_Clear</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lcd.o(i.LCD_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD_Clear &rArr; LCD_SetCursor &rArr; LCD_WR_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collision_check
</UL>

<P><STRONG><a name="[62]"></a>LCD_Display_Dir</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lcd.o(i.LCD_Display_Dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_Display_Dir
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e]"></a>LCD_DrawPicture</STRONG> (Thumb, 64 bytes, Stack size 36 bytes, lcd.o(i.LCD_DrawPicture))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LCD_DrawPicture &rArr; LCD_SetCursor &rArr; LCD_WR_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bullet_position
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_collision
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gaming_show
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;begin_show
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_enemy
</UL>

<P><STRONG><a name="[1f]"></a>LCD_DrawPoint</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, lcd.o(i.LCD_DrawPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WR_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_enemies
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collision_check
</UL>

<P><STRONG><a name="[20]"></a>LCD_Fast_DrawPoint</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, lcd.o(i.LCD_Fast_DrawPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_Fast_DrawPoint &rArr; LCD_WR_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeData
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>

<P><STRONG><a name="[22]"></a>LCD_Fill</STRONG> (Thumb, 60 bytes, Stack size 36 bytes, lcd.o(i.LCD_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LCD_Fill &rArr; LCD_SetCursor &rArr; LCD_WR_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bullet_position
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_collision
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;over_show
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_mode
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_mode
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intelligence_mode
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gaming_show
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gamepad_mode
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collision_check
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;begin_show
</UL>

<P><STRONG><a name="[9]"></a>LCD_INI_FINISH</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, code_def.o(i.LCD_INI_FINISH))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDINI_Handler
</UL>

<P><STRONG><a name="[60]"></a>LCD_Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd.o(i.LCD_Init))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b]"></a>LCD_SetCursor</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, lcd.o(i.LCD_SetCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_SetCursor &rArr; LCD_WR_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPicture
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[23]"></a>LCD_ShowChar</STRONG> (Thumb, 156 bytes, Stack size 44 bytes, lcd.o(i.LCD_ShowChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = LCD_ShowChar &rArr; LCD_Fast_DrawPoint &rArr; LCD_WR_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
</UL>

<P><STRONG><a name="[24]"></a>LCD_ShowString</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, lcd.o(i.LCD_ShowString))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_Fast_DrawPoint &rArr; LCD_WR_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;over_show
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gaming_show
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;begin_show
</UL>

<P><STRONG><a name="[1d]"></a>LCD_WR_DATA</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, lcd.o(i.LCD_WR_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_WR_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeData
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPicture
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
</UL>

<P><STRONG><a name="[1c]"></a>LCD_WR_REG</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcd.o(i.LCD_WR_REG))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeData
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPicture
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
</UL>

<P><STRONG><a name="[2a]"></a>LD_ReadReg</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ld3320.o(i.LD_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LD_ReadReg &rArr; SPI_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteByte
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LD_Init_Common
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LD_Check_ASRBusyFlag_b2
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ld3320_Fun
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessInt
</UL>

<P><STRONG><a name="[28]"></a>LD_WriteReg</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ld3320.o(i.LD_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LD_WriteReg &rArr; SPI_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LD_Init_Common
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LD_Init_ASR
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LD_AsrRun
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LD_AsrAddFixed
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ld3320_Fun
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessInt
</UL>

<P><STRONG><a name="[30]"></a>LD_reset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ld3320.o(i.LD_reset))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ld3320_Fun
</UL>

<P><STRONG><a name="[2f]"></a>Ld3320_Fun</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, ld3320.o(i.Ld3320_Fun))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = Ld3320_Fun &rArr; LD_AsrAddFixed &rArr; LD_Check_ASRBusyFlag_b2 &rArr; LD_ReadReg &rArr; SPI_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LD_reset
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LD_WriteReg
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LD_ReadReg
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LD_Init_ASR
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LD_AsrRun
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LD_AsrAddFixed
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1String
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;over_show
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;begin_show
</UL>

<P><STRONG><a name="[32]"></a>MPU_IIC_Ack</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mpuiic.o(i.MPU_IIC_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MPU_IIC_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Read_Byte
</UL>

<P><STRONG><a name="[34]"></a>MPU_IIC_NAck</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mpuiic.o(i.MPU_IIC_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MPU_IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Read_Byte
</UL>

<P><STRONG><a name="[13]"></a>MPU_IIC_Read_Byte</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, mpuiic.o(i.MPU_IIC_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MPU_IIC_Read_Byte &rArr; MPU_IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_NAck
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Ack
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_value
</UL>

<P><STRONG><a name="[10]"></a>MPU_IIC_Send_Byte</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, mpuiic.o(i.MPU_IIC_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MPU_IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_value
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
</UL>

<P><STRONG><a name="[f]"></a>MPU_IIC_Start</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mpuiic.o(i.MPU_IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MPU_IIC_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_value
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
</UL>

<P><STRONG><a name="[12]"></a>MPU_IIC_Stop</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mpuiic.o(i.MPU_IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MPU_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_value
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Wait_Ack
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
</UL>

<P><STRONG><a name="[11]"></a>MPU_IIC_Wait_Ack</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, mpuiic.o(i.MPU_IIC_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Stop
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_value
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
</UL>

<P><STRONG><a name="[35]"></a>MPU_Write_Byte</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, code_def.o(i.MPU_Write_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MPU_Write_Byte &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Wait_Ack
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Stop
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Start
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8591_Init
</UL>

<P><STRONG><a name="[21]"></a>MakeData</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, lcd.o(i.MakeData))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
</UL>

<P><STRONG><a name="[36]"></a>PAJ_IIC_Ack</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, pajiic.o(i.PAJ_IIC_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PAJ_IIC_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAJ_IIC_Read_Byte
</UL>

<P><STRONG><a name="[37]"></a>PAJ_IIC_NAck</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, pajiic.o(i.PAJ_IIC_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PAJ_IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAJ_IIC_Read_Byte
</UL>

<P><STRONG><a name="[38]"></a>PAJ_IIC_Read_Byte</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, pajiic.o(i.PAJ_IIC_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PAJ_IIC_Read_Byte &rArr; PAJ_IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAJ_IIC_NAck
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAJ_IIC_Ack
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paj_read_nbyte
</UL>

<P><STRONG><a name="[39]"></a>PAJ_IIC_Send_Byte</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, pajiic.o(i.PAJ_IIC_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PAJ_IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paj_write_byte
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paj_wakeup
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paj_read_nbyte
</UL>

<P><STRONG><a name="[3a]"></a>PAJ_IIC_Start</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, pajiic.o(i.PAJ_IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PAJ_IIC_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paj_write_byte
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paj_wakeup
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paj_read_nbyte
</UL>

<P><STRONG><a name="[3b]"></a>PAJ_IIC_Stop</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, pajiic.o(i.PAJ_IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PAJ_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paj_write_byte
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paj_wakeup
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paj_read_nbyte
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAJ_IIC_Wait_Ack
</UL>

<P><STRONG><a name="[3c]"></a>PAJ_IIC_Wait_Ack</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, pajiic.o(i.PAJ_IIC_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PAJ_IIC_Wait_Ack &rArr; PAJ_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAJ_IIC_Stop
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paj_write_byte
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paj_read_nbyte
</UL>

<P><STRONG><a name="[3d]"></a>PCF8591_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, code_def.o(i.PCF8591_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PCF8591_Init &rArr; MPU_Write_Byte &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3e]"></a>ProcessInt</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, ld3320.o(i.ProcessInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ProcessInt &rArr; LD_WriteReg &rArr; SPI_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LD_WriteReg
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LD_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIHandle
</UL>

<P><STRONG><a name="[45]"></a>ReadUART1State</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, code_def.o(i.ReadUART1State))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteUART1
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DATA
</UL>

<P><STRONG><a name="[48]"></a>ReadUART2State</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, code_def.o(i.ReadUART2State))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteUART2
</UL>

<P><STRONG><a name="[a]"></a>SPIHandle</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, code_def.o(i.SPIHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SPIHandle &rArr; ProcessInt &rArr; LD_WriteReg &rArr; SPI_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessInt
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Handler
</UL>

<P><STRONG><a name="[2e]"></a>SPI_ReadByte</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, code_def.o(i.SPI_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPI_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LD_ReadReg
</UL>

<P><STRONG><a name="[2d]"></a>SPI_WriteByte</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, code_def.o(i.SPI_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPI_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LD_WriteReg
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LD_ReadReg
</UL>

<P><STRONG><a name="[3f]"></a>SendCmd</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, code_def.o(i.SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SendCmd &rArr; UART_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendCmd
</UL>

<P><STRONG><a name="[17]"></a>UART1String</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, code_def.o(i.UART1String))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART1String &rArr; WriteUART1
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteUART1
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ld3320_Fun
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gesture_test
</UL>

<P><STRONG><a name="[43]"></a>UART2String</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, code_def.o(i.UART2String))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART2String &rArr; WriteUART2
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteUART2
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collision_check
</UL>

<P><STRONG><a name="[40]"></a>UART_DATA</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, code_def.o(i.UART_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUART1State
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>

<P><STRONG><a name="[46]"></a>Uart_SendCmd</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, code_def.o(i.Uart_SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Uart_SendCmd &rArr; SendCmd &rArr; UART_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoSum
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;volumn_change
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;over_show
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;begin_show
</UL>

<P><STRONG><a name="[41]"></a>WriteUART1</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, code_def.o(i.WriteUART1))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = WriteUART1
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUART1State
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1String
</UL>

<P><STRONG><a name="[44]"></a>WriteUART2</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, code_def.o(i.WriteUART2))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = WriteUART2
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUART2State
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2String
</UL>

<P><STRONG><a name="[49]"></a>__0sprintf$1</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[76]"></a>__1sprintf$1</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1), UNUSED)

<P><STRONG><a name="[31]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ld3320_Fun
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gaming_show
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collision_check
</UL>

<P><STRONG><a name="[5d]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intelligence_mode
</UL>

<P><STRONG><a name="[77]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[78]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[79]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[4b]"></a>begin_show</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, main.o(i.begin_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = begin_show &rArr; Ld3320_Fun &rArr; LD_AsrAddFixed &rArr; LD_Check_ASRBusyFlag_b2 &rArr; LD_ReadReg &rArr; SPI_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ld3320_Fun
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPicture
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_delay
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendCmd
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4d]"></a>channel_select</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mpuiic.o(i.channel_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = channel_select &rArr; ADC_value &rArr; MPU_IIC_Read_Byte &rArr; MPU_IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_value
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;over_show
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gamepad_mode
</UL>

<P><STRONG><a name="[4e]"></a>check_collision</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, game.o(i.check_collision))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = check_collision &rArr; LCD_Fill &rArr; LCD_SetCursor &rArr; LCD_WR_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPicture
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collision_check
</UL>

<P><STRONG><a name="[50]"></a>check_hit</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, game.o(i.check_hit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = check_hit
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collision_check
</UL>

<P><STRONG><a name="[4f]"></a>collision_check</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, main.o(i.collision_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = collision_check &rArr; check_collision &rArr; LCD_Fill &rArr; LCD_SetCursor &rArr; LCD_WR_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_hit
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_collision
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2String
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19]"></a>delay_ms</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, code_def.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paj_wakeup
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LD_Init_Common
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LD_Check_ASRBusyFlag_b2
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan
</UL>

<P><STRONG><a name="[33]"></a>delay_us</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, code_def.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAJ_IIC_Wait_Ack
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAJ_IIC_Stop
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAJ_IIC_Start
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAJ_IIC_Send_Byte
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAJ_IIC_Read_Byte
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAJ_IIC_NAck
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAJ_IIC_Ack
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Read_Byte
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_NAck
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Ack
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Wait_Ack
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Stop
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Start
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Send_Byte
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteByte
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadByte
</UL>

<P><STRONG><a name="[52]"></a>draw_enemy</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, game.o(i.draw_enemy))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = draw_enemy &rArr; LCD_DrawPicture &rArr; LCD_SetCursor &rArr; LCD_WR_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPicture
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_enemies
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_enemies
</UL>

<P><STRONG><a name="[4c]"></a>esp8266_delay</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, main.o(i.esp8266_delay))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;over_show
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;begin_show
</UL>

<P><STRONG><a name="[53]"></a>esp8266_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, main.o(i.esp8266_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = esp8266_init &rArr; UART2String &rArr; WriteUART2
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_delay
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2String
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[54]"></a>game_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, game.o(i.game_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = game_init &rArr; init_enemies &rArr; draw_enemy &rArr; LCD_DrawPicture &rArr; LCD_SetCursor &rArr; LCD_WR_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_enemies
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_bullets
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[57]"></a>gamepad_mode</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, main.o(i.gamepad_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = gamepad_mode &rArr; LCD_Fill &rArr; LCD_SetCursor &rArr; LCD_WR_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_select
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[58]"></a>gaming_show</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, main.o(i.gaming_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = gaming_show &rArr; LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_Fast_DrawPoint &rArr; LCD_WR_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bullet_position
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_enemies
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPicture
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5b]"></a>generate_random_position</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, game.o(i.generate_random_position))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = generate_random_position &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_enemies
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_enemies
</UL>

<P><STRONG><a name="[56]"></a>init_bullets</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, game.o(i.init_bullets))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_bullets
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_init
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[55]"></a>init_enemies</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, game.o(i.init_enemies))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = init_enemies &rArr; draw_enemy &rArr; LCD_DrawPicture &rArr; LCD_SetCursor &rArr; LCD_WR_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_random_position
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_enemy
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_init
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>intelligence_mode</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, main.o(i.intelligence_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = intelligence_mode &rArr; Gesture_test &rArr; paj_read_nbyte &rArr; PAJ_IIC_Read_Byte &rArr; PAJ_IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gesture_test
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5e]"></a>key_mode</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, main.o(i.key_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = key_mode &rArr; LCD_Fill &rArr; LCD_SetCursor &rArr; LCD_WR_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5f]"></a>level_improve</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, main.o(i.level_improve))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = level_improve &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>main</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = main &rArr; over_show &rArr; Ld3320_Fun &rArr; LD_AsrAddFixed &rArr; LD_Check_ASRBusyFlag_b2 &rArr; LD_ReadReg &rArr; SPI_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paj_init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_enemies
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_bullets
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_Dir
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;volumn_change
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;over_show
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_mode
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_improve
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_mode
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intelligence_mode
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gaming_show
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gamepad_mode
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collision_check
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;begin_show
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendCmd
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8591_Init
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[66]"></a>motion_mode</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, main.o(i.motion_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = motion_mode &rArr; LCD_Fill &rArr; LCD_SetCursor &rArr; LCD_WR_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5a]"></a>move_enemies</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, game.o(i.move_enemies))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = move_enemies &rArr; draw_enemy &rArr; LCD_DrawPicture &rArr; LCD_SetCursor &rArr; LCD_WR_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_random_position
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_enemy
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gaming_show
</UL>

<P><STRONG><a name="[65]"></a>over_show</STRONG> (Thumb, 304 bytes, Stack size 32 bytes, main.o(i.over_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = over_show &rArr; Ld3320_Fun &rArr; LD_AsrAddFixed &rArr; LD_Check_ASRBusyFlag_b2 &rArr; LD_ReadReg &rArr; SPI_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_select
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ld3320_Fun
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_delay
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendCmd
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[61]"></a>paj_init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, pajiic.o(i.paj_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = paj_init &rArr; paj_wakeup &rArr; paj_read_nbyte &rArr; PAJ_IIC_Read_Byte &rArr; PAJ_IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paj_write_byte
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paj_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16]"></a>paj_read_nbyte</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, pajiic.o(i.paj_read_nbyte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = paj_read_nbyte &rArr; PAJ_IIC_Read_Byte &rArr; PAJ_IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAJ_IIC_Wait_Ack
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAJ_IIC_Stop
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAJ_IIC_Start
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAJ_IIC_Send_Byte
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAJ_IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paj_wakeup
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gesture_test
</UL>

<P><STRONG><a name="[67]"></a>paj_wakeup</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, pajiic.o(i.paj_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = paj_wakeup &rArr; paj_read_nbyte &rArr; PAJ_IIC_Read_Byte &rArr; PAJ_IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paj_write_byte
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paj_read_nbyte
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAJ_IIC_Stop
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAJ_IIC_Start
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAJ_IIC_Send_Byte
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paj_init
</UL>

<P><STRONG><a name="[15]"></a>paj_write_byte</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, pajiic.o(i.paj_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = paj_write_byte &rArr; PAJ_IIC_Wait_Ack &rArr; PAJ_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAJ_IIC_Wait_Ack
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAJ_IIC_Stop
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAJ_IIC_Start
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAJ_IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paj_wakeup
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paj_init
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gesture_test
</UL>

<P><STRONG><a name="[63]"></a>show_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, main.o(i.show_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = show_init &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WR_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[59]"></a>update_bullet_position</STRONG> (Thumb, 360 bytes, Stack size 24 bytes, game.o(i.update_bullet_position))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = update_bullet_position &rArr; LCD_Fill &rArr; LCD_SetCursor &rArr; LCD_WR_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPicture
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gaming_show
</UL>

<P><STRONG><a name="[64]"></a>volumn_change</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, main.o(i.volumn_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = volumn_change &rArr; Uart_SendCmd &rArr; SendCmd &rArr; UART_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[25]"></a>LD_AsrAddFixed</STRONG> (Thumb, 142 bytes, Stack size 168 bytes, ld3320.o(i.LD_AsrAddFixed))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = LD_AsrAddFixed &rArr; LD_Check_ASRBusyFlag_b2 &rArr; LD_ReadReg &rArr; SPI_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LD_WriteReg
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LD_Check_ASRBusyFlag_b2
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ld3320_Fun
</UL>

<P><STRONG><a name="[29]"></a>LD_AsrRun</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, ld3320.o(i.LD_AsrRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LD_AsrRun &rArr; LD_Check_ASRBusyFlag_b2 &rArr; LD_ReadReg &rArr; SPI_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LD_WriteReg
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LD_Check_ASRBusyFlag_b2
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ld3320_Fun
</UL>

<P><STRONG><a name="[27]"></a>LD_Check_ASRBusyFlag_b2</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ld3320.o(i.LD_Check_ASRBusyFlag_b2))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LD_Check_ASRBusyFlag_b2 &rArr; LD_ReadReg &rArr; SPI_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LD_ReadReg
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LD_AsrRun
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LD_AsrAddFixed
</UL>

<P><STRONG><a name="[2b]"></a>LD_Init_ASR</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, ld3320.o(i.LD_Init_ASR))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LD_Init_ASR &rArr; LD_Init_Common &rArr; LD_WriteReg &rArr; SPI_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LD_WriteReg
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LD_Init_Common
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ld3320_Fun
</UL>

<P><STRONG><a name="[2c]"></a>LD_Init_Common</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, ld3320.o(i.LD_Init_Common))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LD_Init_Common &rArr; LD_WriteReg &rArr; SPI_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LD_WriteReg
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LD_ReadReg
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LD_Init_ASR
</UL>

<P><STRONG><a name="[4a]"></a>_printf_core</STRONG> (Thumb, 332 bytes, Stack size 88 bytes, printf1.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$1
</UL>

<P><STRONG><a name="[5]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf1.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(i.__0sprintf$1)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
